import telebot
from telebot.types import Message, ReplyKeyboardMarkup
import logging
from typing import Dict, Optional
from datetime import datetime
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(str(Path(__file__).parent.parent))

from config import Config
from services.google_sheets import GoogleSheetsService
from bot.menus import MenuItem, MenuManager
from bot.keyboards import KeyboardGenerator

class TelegramBot:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        self._init_logger()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.bot = telebot.TeleBot(Config.TOKEN)
        self.sheets = GoogleSheetsService()
        self.keyboard_generator = KeyboardGenerator()
        self.menu_manager: Optional[MenuManager] = None
        self.user_states: Dict[int, MenuItem] = {}  # chat_id: current_menu_item
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é
        self._load_menu()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        self.logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _init_logger(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger = logging.getLogger(__name__)
        handler = logging.StreamHandler()
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)
        self.logger.setLevel(logging.INFO)

    def _load_menu(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é –∏–∑ Google Sheets"""
        try:
            data = self.sheets.get_data(f"{Config.SHEET_NAME}!A2:D")
            if data:
                self.menu_manager = MenuManager(data)
                self.logger.info("–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é: {e}")

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        @self.bot.message_handler(commands=['start', 'menu'])
        def handle_start(message: Message):
            self._show_root_menu(message.chat.id)

        @self.bot.message_handler(func=lambda m: True)
        def handle_message(message: Message):
            self._process_user_input(message)

    def _escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown"""
        escape_chars = '_*[]()~`>#+-=|{}.!'
        return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

    def _format_content(self, item: MenuItem) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        title = self._escape_markdown(item.title)
        text = self._escape_markdown(item.text) if item.text else ""
        return f"*{title}*\n\n{text}" if text else f"*{title}*"

    def _generate_keyboard(self, item: MenuItem) -> Optional[ReplyKeyboardMarkup]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—á–µ—Ç–æ–º –∫–æ–Ω–µ—á–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤"""
        buttons = []
    
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø—É–Ω–∫—Ç—ã
        if item.children:
            buttons.extend([[child.title] for child in item.children])
    
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤ –∫—Ä–æ–º–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ
        if not item.is_root:
            nav_buttons = ["‚óÄÔ∏è –ù–∞–∑–∞–¥"]
            if any(item.children):  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø—É–Ω–∫—Ç—ã - –¥–æ–±–∞–≤–ª—è–µ–º "–í –Ω–∞—á–∞–ª–æ"
                nav_buttons.append("üè† –í –Ω–∞—á–∞–ª–æ")
            buttons.append(nav_buttons)
    
        return self.keyboard_generator.create_reply_keyboard(buttons) if buttons else None

    def _show_root_menu(self, chat_id: int):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–µ–Ω—é"""
        if not self.menu_manager or not self.menu_manager.root_items:
            self.bot.send_message(chat_id, "‚ö†Ô∏è –ú–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return
            
        self._show_menu(chat_id, self.menu_manager.root_items[0])

    def _show_menu(self, chat_id: int, menu_item: MenuItem):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—É–Ω–∫—Ç –º–µ–Ω—é —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.user_states[chat_id] = menu_item
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É–Ω–∫—Ç –∫–æ–Ω–µ—á–Ω—ã–º (–Ω–µ—Ç –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤)
            if not menu_item.children and menu_item.text:
                # –ö–æ–Ω–µ—á–Ω—ã–π –ø—É–Ω–∫—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                self.bot.send_message(
                    chat_id,
                    self._format_content(menu_item),
                    parse_mode="MarkdownV2"
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
                nav_buttons = []
                if not menu_item.is_root:
                    nav_buttons = [["‚óÄÔ∏è –ù–∞–∑–∞–¥", "üè† –í –Ω–∞—á–∞–ª–æ"]]
            
                if nav_buttons:
                    self.bot.send_message(
                        chat_id,
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=self.keyboard_generator.create_reply_keyboard(nav_buttons)
                    )
            else:
                # –û–±—ã—á–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –ø–æ–¥–ø—É–Ω–∫—Ç–∞–º–∏
                keyboard = self._generate_keyboard(menu_item)
                self.bot.send_message(
                    chat_id,
                    self._format_content(menu_item),
                    reply_markup=keyboard,
                    parse_mode="MarkdownV2"
                )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é: {e}")
            # –§–æ–ª–±—ç–∫ –≤–∞—Ä–∏–∞–Ω—Ç
            self.bot.send_message(
                chat_id,
                f"{menu_item.title}\n\n{menu_item.text or ''}"
            )

    def _process_user_input(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = message.chat.id
        current_item = self.user_states.get(chat_id)
        
        if not current_item:
            self._show_root_menu(chat_id)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
            if parent := self.menu_manager.get_parent(current_item.id):
                self._show_menu(chat_id, parent)
            return
                
        if message.text == "üè† –í –Ω–∞—á–∞–ª–æ":
            self._show_root_menu(chat_id)
            return
            
        # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
        for child in current_item.children:
            if child.title == message.text:
                self._show_menu(chat_id, child)
                return
                
        self.bot.reply_to(message, "‚ùå –ü—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            self.bot.infinity_polling()
        except Exception as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")